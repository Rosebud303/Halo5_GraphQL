{"version":3,"sources":["actions/index.js","containers/WelcomePage/WelcomePage.js","containers/Carousel/Carousel.js","Spinner/Spinner.js","containers/HomePage/Homepage.js","components/Header/Header.js","Queries/GraphQLQueries.js","containers/Detailspage/Detailspage.js","containers/Arenapage/Arenapage.js","containers/Warzonepage/Warzonepage.js","Queries/MetadataQueries.js","MetadataLoader.js","containers/WarzoneDropbox/WarzoneDropbox.js","containers/WarzoneVariant/WarzoneVariant.js","components/LibrarySelector/LibrarySelector.js","components/LibraryCardsContainer/LibraryCardsContainer.js","components/LibraryCardsFilters/LibraryCardsFilters.js","components/MetadataPage/MetadataPage.js","containers/App/App.js","serviceWorker.js","reducers/allReducers.js","reducers/index.js","index.js","apikey.js"],"names":["currentSearchedPlayer","player","type","WelcomePage","handleChange","event","setState","searchedPlayer","target","value","handleSubmit","preventDefault","props","state","searched","localStorage","csrMetadata","axios","create","headers","api_key","get","then","data","setItem","JSON","stringify","this","redirectPath","className","src","onSubmit","to","name","onChange","placeholder","required","Component","connect","dispatch","actions","Carousel","articleData","title","summary","url","imgLink","dots","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","map","imgStyle","backgroundImage","style","href","Spinner","Homepage","a","setImgUrlSpartan","setImgUrlEmblem","setUrlSpartan","setUrlEmblem","clearInputs","proxyurl","currentPlayer","currentImgUrlSpartan","currentImgUrlEmblem","spartanImageStyle","backgroundPosition","backgroundSize","width","height","alt","Header","header","button1","button2","id","ARENA_DROPDOWN_QUERY","gql","SELECTED_VARIANT_QUERY","ARENA_CSR_QUERY","ACCUMULATIVE_ARENA_QUERY","WARZONE_DROPDOWN_QUERY","GAME_VARIANT_WARZONE_QUERY","MAP_QUERY","ACCUMULATIVE_WARZONE_QUERY","Detailspage","findBestMedals","medalsArray","medal","foundMedal","parsedMedalsMetadata","find","found","MedalId","description","difficulty","spriteLocation","Id","Name","Description","Difficulty","Location","Count","sort","b","slice","contentCreator","queriedData","spriteSheetUri","left","top","medalStyles","margin","size","arenaMedals","warzoneMedals","parse","getItem","player_name","parsedCsrMetadata","parsedWeaponsMetadata","query","variables","loading","error","console","log","accumulativeArenaStats","HighestCsrAttained","TotalGamesWon","TotalGamesLost","TotalGamesTied","TotalGamesCompleted","TotalKills","TotalDeaths","TotalAssists","WeaponWithMostKills","TotalShotsFired","TotalShotsLanded","TotalAssassinations","TotalMeleeKills","TotalGroundPoundKills","TotalShoulderBashKills","MedalAwards","foundWeapon","weapon","WeaponId","StockId","foundRank","rank","DesignationId","foundTier","tiers","tier","Tier","iconImageUrl","toFixed","toLocaleString","Number","largeIconImageUrl","parseInt","TotalDamageDealt","warzoneStats","emblemStyle","Arenapage","selectArenaVariant","e","optionIndex","selectedIndex","emptyOption","selectOptions","options","gameVarId","gameVarIdName","text","currentGameVariant","currentGameVariantName","GameBaseVariantId","parsedSeasonsMetadata","key","parsedGameVariantMetadata","htmlFor","arenaGameBases","item","arenaStats","TotalGrenadeKills","TotalPowerWeaponKills","TotalHeadshots","TotalWeaponDamage","Impulses","FlexibleStats","arenaCsr","HighestCsrPlaylistId","HighestCsrSeasonId","foundPlaylist","playlist","foundGameMode","playlists","bannerImageUrl","Warzonepage","reduceTotals","property","reduce","acc","cur","findMostEffectiveWeapon","findMostObtainedMedals","allMedals","forEach","Object","keys","SpriteLocation","createContent","wholeData","parsedGameBaseVariants","scenarioStats","filter","variant","gameVariantId","setWarzoneId","defaultChecked","onClick","metadataQueryList","MetadataLoader","metadata","indexOf","WarzoneDropbox","selectMapVariant","mapVarId","mapVarIdName","currentMapVariantId","currentMapVariantName","warzoneGameVariantId","MapId","parsedMapsMetadata","wzVariantStats","gameVariant","foundMap","mapStats","imageUrl","WarzoneFireFight","currentWzVariantId","LibrarySelector","changeLibrary","data-compare","data-filter","LibraryCardsContainer","selectedLibrary","selectedLibraryName","libraryCards","card","medalStyle","faction","LibraryCardsFilters","selectedLibraryFilters","filterChosenLibrary","filters","MetadataPage","innerText","toLowerCase","changeSelectedLibrary","changeLibraryFilters","selectedCompare","dataset","compare","library","btnText","filterProp","lowerCasedBtnText","correctBtnText","charAt","toUpperCase","newLibrary","includes","App","exact","path","component","WarzoneVariant","Boolean","window","location","hostname","match","spartanName","spartanEmblem","spartanAppearance","warzoneVariantId","rootReducer","combineReducers","action","store","createStore","rootReduceer","composeWithDevTools","applyMiddleware","thunk","client","ApolloClient","uri","router","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.0154f7ef.chunk.js","sourcesContent":["export const currentSearchedPlayer = (player) => ({\n  type: \"SET_CURRENT_PLAYER\",\n  player,\n});\n\nexport const setImgUrlSpartan = (url) => ({\n  type: \"SET_URL_SPARTAN\",\n  url,\n});\n\nexport const setImgUrlEmblem = (url) => ({\n  type: \"SET_URL_EMBLEM\",\n  url,\n});\n\nexport const setWarzoneId = (id) => ({\n  type: \"SET_WZ_ID\",\n  id,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './WelcomePage.scss';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../actions';\nimport axios from 'axios';\nimport { api_key } from '../../apikey';\n\nclass WelcomePage extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchedPlayer: '',\n      searched: false,\n    };\n  }\n\n  componentDidMount() {\n    if (!localStorage.csrMetadata) {\n      axios\n        .create({\n          headers: { 'Ocp-Apim-Subscription-Key': api_key },\n        })\n        .get(`https://www.haloapi.com/metadata/h5/metadata/csr-designations`)\n        .then(data => localStorage.setItem('csrMetadata', JSON.stringify(data.data)))\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      searchedPlayer: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.currentSearchedPlayer(this.state.searchedPlayer);\n    this.setState({ searched: true });\n  };\n\n  render() {\n    const { state: { searched, searchedPlayer }, handleSubmit, handleChange } = this\n    const redirectPath = searched ? '/homepage' : '/';\n\n    return (\n      <div className='welcome'>\n        <header className='welcome-banner'>\n          <img src='https://i.imgur.com/z1qbHFr.png'/>\n        </header>\n        <div className='welcome-page'>\n          <form className='welcome-form' onSubmit={handleSubmit}>\n            <Redirect to={redirectPath} />\n            <input\n              className='welcome-search welcome-search-input'\n              name='search'\n              onChange={handleChange}\n              placeholder='Search Your Spartan...'\n              required\n              type='text'\n              value={searchedPlayer}\n            />\n            <button\n              className='welcome-search welcome-search-button'\n              type='submit'\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  currentSearchedPlayer: (player) =>\n    dispatch(actions.currentSearchedPlayer(player)),\n});\n\nexport default connect(null, mapDispatchToProps)(WelcomePage);\n","import React, { Component } from \"react\";\nimport \"./Carousel.scss\";\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport Slider from 'react-slick';\n\n\n\nexport default class Carousel extends Component {\n\n  render() {\n    const articleData = [\n      { title: 'Halo Infinite ', summary: 'Rumors, release dates, plot, and gameplay.  Get the most up to date information on the upcoming mega release, Halo Infinite!  Everything we know about Halo Infinite so far can be found here!', url: 'https://www.laptopmag.com/news/halo-infinite-rumors-release-date-plot-and-gameplay', imgLink: 'https://i.imgur.com/iNUbukr.jpg' },\n      { title: 'Accessible Gaming', summary: 'Come celebrate Global Awareness Day with the Halo community. Watch the livestream hosted by SightlessKombat as he plays a custom game variant created to push the gaming industry to create better experiences for everyone. Amazing work!', url: 'https://blog-ambassadors.xbox.com/global-accessibility-awareness-day-playing-halo-5-guardians-without-sight', imgLink: 'https://i.imgur.com/tFwNtwA.png' },\n      { title: 'Halo 5 Content Updates', summary: 'Get an overview of all the recent updates and changes made to Halo 5.  Here you can find patch notes, new game modes, and other news pertaining to Halo 5! These game modes include Overtime, Monitor\\'s Bounty, and Anvil\\'s Legacy, come check it out Today!', url: 'https://www.halowaypoint.com/en-us/games/halo-5-guardians/updates', imgLink: 'https://i.imgur.com/53obnwG.jpg' },\n      { title: 'MCC Pro Series', summary: 'Follow the current rankings in the PRO Series. Team information, Standings, Matches and much more! Stay up to date with all your favorite players and teams!', url: 'https://www.faceit.com/en/championship/5964985b-aba8-4f24-b5c9-3b1b9bf00adc/Halo%20MCC%20Open%20Qualifier/standings/classic', imgLink: 'https://i.imgur.com/55mIZWf.png' },\n      { title: 'Discord', summary: 'Join your fellow Spartans in friendly conversation about all that is Halo! Like minded Halo fans can enjoy a fun and down to earth environment. Join today!', url: 'https://discord.com/invite/halo', imgLink: 'https://i.imgur.com/7usoV7r.jpg' },\n      { title: 'Twitter ', summary: 'Follow the official twitter of 343 Industries Halo!  Get all the latest tweets and updates live through the feed of the makers of Halo.  Find interesting pictures, posts, and a great community by following today!', url: 'https://twitter.com/halo?lang=en', imgLink: 'https://i.imgur.com/IikCrAF.jpg' },\n    ]\n\n    const renderSlides = () =>\n      articleData.map(({ imgLink, title, summary, url }) => {\n        const imgStyle = { backgroundImage: `url(${imgLink})` }\n        return (<div>\n          <div className='carousel-slide'>\n            <div className='article-img-container' style={imgStyle}></div>\n            <div className='article-info'>\n              <h3>{title}</h3>\n              <p>{summary}</p>\n              <a href={url} target='_blank'>Click Here to Read More..</a>\n            </div>\n          </div>\n        </div>\n        )\n      })\n\n\n    return (\n      <div className='App'>\n        <Slider\n          dots={true}\n          slidesToShow={1}\n          slidesToScroll={1}\n          autoplay={true}\n          autoplaySpeed={4000}\n        >\n          {renderSlides()}\n        </Slider>\n      </div>)\n  }\n}\n","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = (props) => (\n  <>\n    <div className='spinner' />\n    <p className='spinner__text'>Loading {props.name}...</p>\n  </>\n);\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './Homepage.scss';\nimport * as actions from '../../actions';\nimport Carousel from '../Carousel/Carousel';\nimport { api_key, proxyurl } from '../../apikey';\nimport axios from 'axios';\nimport Spinner from '../../Spinner/Spinner';\n\n\nclass Homepage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchedPlayer: '',\n    };\n  }\n\n  componentDidMount() {\n    this.setUrlSpartan();\n    this.setUrlEmblem();\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      searchedPlayer: event.target.value,\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    this.props.setImgUrlSpartan('');\n    this.props.setImgUrlEmblem('');\n    await this.props.currentSearchedPlayer(this.state.searchedPlayer);\n    this.setUrlSpartan();\n    this.setUrlEmblem();\n    this.clearInputs();\n  };\n\n  setUrlSpartan = () => {\n    axios\n      .create({\n        headers: { 'Ocp-Apim-Subscription-Key': api_key },\n      })\n      .get(\n        proxyurl +\n        `https://www.haloapi.com/profile/h5/profiles/${this.props.currentPlayer}/spartan?size=512`\n      )\n      .then((data) => this.props.setImgUrlSpartan(data.headers['x-final-url']));\n  };\n\n  setUrlEmblem = () => {\n    axios\n      .create({\n        headers: { 'Ocp-Apim-Subscription-Key': api_key },\n      })\n      .get(\n        proxyurl +\n        `https://www.haloapi.com/profile/h5/profiles/${this.props.currentPlayer}/emblem?size=512`\n      )\n      .then((data) => this.props.setImgUrlEmblem(data.headers['x-final-url']));\n  };\n\n  clearInputs = () => {\n    this.setState({ searchedPlayer: '' });\n  }\n\n  render() {\n    const { handleSubmit, handleChange, state: { searchedPlayer }, props: { currentPlayer, currentImgUrlSpartan, currentImgUrlEmblem } } = this\n    const spartanImageStyle = {\n      backgroundImage: `url(${currentImgUrlSpartan})`,\n      backgroundPosition: `-90px -25px`,\n      backgroundSize: 'auto',\n      width: '200px',\n      height: '230px'\n    }\n\n    return (\n      <>\n        <div className='carousel-search-options'>\n          <Carousel />\n          <form className='welcome-form' onSubmit={handleSubmit}>\n            <input\n              className='welcome-search welcome-search-input'\n              name='search'\n              onChange={handleChange}\n              placeholder='Find New Spartan...'\n              required\n              type='text'\n              value={searchedPlayer}\n            />\n            <button\n              className='welcome-search welcome-search-button'\n              type='submit'\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n        <div className='lesser-spartan-details'>\n          <section className='spartan-gfx'>\n            <p className='id-card-name'>{currentPlayer}</p>\n\n            <div className='id-card-images'>\n              <div className='id-image-container-1'>\n                {currentImgUrlSpartan ? (\n\n                  <div className='spartan-image-container' style={spartanImageStyle}></div>\n\n\n                ) : (\n                    <Spinner name={'Spartan'} />\n                  )}\n              </div>\n              <div className='id-image-container-2'>\n                {currentImgUrlEmblem ? (\n                  <img\n                    alt='Player Emblem'\n                    className='lesser-emblem'\n                    src={currentImgUrlEmblem}\n                  />\n                ) : (\n                    <Spinner name={'Spartan'} />\n                  )}\n              </div>\n            </div>\n\n          </section>\n          <section className='banner-company-links'>\n            <h3 className='lesser-company'>COMPANY PLACEHOLDER</h3>\n            <Link to='/details' className='homepage-links'>\n              <p className='detail-link details'>DETAILS PAGE</p>\n            </Link>\n            <Link to='/arena' className='homepage-links'>\n              <p className='detail-link arena-lesser'>ARENA PAGE</p>\n            </Link>\n            <Link to='/warzone' className='homepage-links'>\n              <p className='detail-link warzone-lesser'>WARZONE PAGE</p>\n            </Link>\n            <Link to='/libraries' className='homepage-links'>\n              <p className='detail-link warzone-lesser'>LIBRARIES PAGE</p>\n            </Link>\n          </section>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n  currentImgUrlSpartan: state.currentImgUrlSpartan,\n  currentImgUrlEmblem: state.currentImgUrlEmblem,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  currentSearchedPlayer: (player) =>\n    dispatch(actions.currentSearchedPlayer(player)),\n  setImgUrlSpartan: (url) => dispatch(actions.setImgUrlSpartan(url)),\n  setImgUrlEmblem: (url) => dispatch(actions.setImgUrlEmblem(url)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.scss';\n\nexport default function Header({ title, header, button1, button2 }) {\n\n  return (\n    <header id='header-all' className='arena-header header-all'>\n      <div>\n        <h1 className='arena-title header-title'>{title || header}</h1>\n      </div>\n      <div className='buttons-container'>\n        <Link to='/homepage' className='homepage-links'>\n          <p id='buttons' className='detail-link arena-button'>HOMEPAGE</p>\n        </Link>\n        <Link to={`/${button1}`} className='homepage-links'>\n          <p id='buttons' className='detail-link arena-button'>{`${button1} Page`}</p>\n        </Link>\n        <Link to={`/${button2}`} className='homepage-links'>\n          <p id='buttons' className='detail-link arena-button'>{`${button2} Page`}</p>\n        </Link>\n      </div>\n    </header>\n  );\n}\n","import gql from 'graphql-tag';\n\n//****************************************** ARENA QUERIES **********************************/\n\nexport const ARENA_DROPDOWN_QUERY = gql`\n  query GameVariantIdQuery($player_name: String!) {\n    arenaGameBases(player_name: $player_name) {\n      GameBaseVariantId\n    }\n  }\n`;\n\nexport const SELECTED_VARIANT_QUERY = gql`\n  query ArenaQuery($player_name: String!, $GameBaseVariantId: String!) {\n    arenaStats(player_name: $player_name GameBaseVariantId: $GameBaseVariantId) {\n      TotalGamesWon\n      TotalGamesLost\n      TotalGamesTied\n      TotalGamesCompleted\n      TotalKills\n      TotalDeaths\n      TotalAssists\n      WeaponWithMostKills {\n        WeaponId {\n          StockId\n        }\n        TotalKills\n        TotalDamageDealt\n        TotalShotsFired\n        TotalShotsLanded\n      }\n      TotalAssassinations\n      TotalMeleeKills\n      TotalGroundPoundKills\n      TotalShoulderBashKills\n      TotalGrenadeKills\n      TotalPowerWeaponKills\n      TotalHeadshots\n      TotalWeaponDamage\n      TotalShotsFired\n      TotalShotsLanded\n      Impulses {\n        Id\n        Count\n      }\n      MedalAwards {\n        MedalId\n        Count\n      }\n      FlexibleStats {\n        MedalStatCounts {\n          Id\n          Count\n        }\n      }\n    }\n  }\n`;\n\nexport const ARENA_CSR_QUERY = gql`\n  query CsrQuery($player_name: String!) {\n    arenaCsr(player_name: $player_name) {\n      HighestCsrAttained {\n        Tier\n        DesignationId\n        PercentToNextTier\n      }\n      HighestCsrPlaylistId\n      HighestCsrSeasonId\n    }\n  }\n`\n\nexport const ACCUMULATIVE_ARENA_QUERY = gql`\n  query ArenaQuery($player_name: String!) {\n    accumulativeArenaStats(player_name: $player_name) {\n      HighestCsrAttained {\n        Tier\n        DesignationId\n        PercentToNextTier\n      }\n      HighestCsrPlaylistId\n      HighestCsrSeasonId\n      ArenaPlaylistStatsSeasonId\n      TotalGamesWon\n      TotalGamesLost\n      TotalGamesTied\n      TotalGamesCompleted\n      TotalKills\n      TotalDeaths\n      TotalAssists\n      TopGameBaseVariants {\n        GameBaseVariantId\n        GameBaseVariantRank\n        NumberOfMatchesWon\n      }\n      WeaponWithMostKills {\n        WeaponId {\n          StockId\n        }\n        TotalKills\n        TotalDamageDealt\n        TotalShotsFired\n        TotalShotsLanded\n      }\n      TotalShotsFired\n      TotalShotsLanded\n      TotalAssassinations\n      TotalMeleeKills\n      TotalGroundPoundKills\n      TotalShoulderBashKills\n      MedalAwards {\n        MedalId\n        Count\n      }\n    }\n  }\n`;\n//****************************************** WARZONE QUERIES **********************************/\n\nexport const WARZONE_DROPDOWN_QUERY = gql`\n  query WarzoneQuery($player_name: String!, $GameBaseVariantId: String!) {\n    wzVariantStats(player_name: $player_name, GameBaseVariantId: $GameBaseVariantId) {\n      GameBaseVariantId\n      MapId\n    }\n  }\n`;\n\nexport const GAME_VARIANT_WARZONE_QUERY = gql`\n  query GameVariantWzQuery($player_name: String!) {\n    scenarioStats(player_name: $player_name) {\n      GameBaseVariantId\n      MapId\n      TotalKills\n      TotalHeadshots\n      TotalWeaponDamage\n      TotalShotsFired\n      TotalShotsLanded\n      TotalGamesWon\n      TotalGamesLost\n      TotalGamesTied\n      WeaponWithMostKills {\n        TotalKills\n        TotalHeadshots\n        TotalShotsFired\n        TotalShotsLanded\n        TotalDamageDealt\n        WeaponId {\n          StockId\n        }\n      }\n      MedalAwards {\n        MedalId\n        Count\n      }\n    }\n  }\n`;\n\nexport const MAP_QUERY = gql`\n  query MapQuery($player_name: String!, $GameBaseVariantId: String!, $MapId: String!) {\n    mapStats(player_name: $player_name, GameBaseVariantId: $GameBaseVariantId, MapId: $MapId) {\n      TotalKills\n      TotalHeadshots\n      TotalWeaponDamage\n      TotalShotsFired\n      TotalShotsLanded\n      TotalGamesWon\n      TotalGamesLost\n      TotalGamesTied\n      WeaponWithMostKills {\n        TotalKills\n        TotalHeadshots\n        TotalShotsFired\n        TotalShotsLanded\n        TotalDamageDealt\n        WeaponId {\n          StockId\n        }\n      }\n      MedalAwards {\n        MedalId\n        Count\n      }\n    }\n  }\n`;\n\nexport const ACCUMULATIVE_WARZONE_QUERY = gql`\n  query AccumulativeWzQuery($player_name: String!) {\n    warzoneStats(player_name: $player_name) {\n      TotalKills\n      TotalDeaths\n      TotalAssists\n      TotalHeadshots\n      TotalWeaponDamage\n      TotalShotsFired\n      TotalShotsLanded\n      TotalGamesWon\n      TotalGamesLost\n      TotalGamesCompleted\n      WeaponWithMostKills {\n        TotalKills\n        TotalHeadshots\n        TotalShotsFired\n        TotalShotsLanded\n        TotalDamageDealt\n        WeaponId {\n          StockId\n        }\n      }\n      MedalAwards {\n        MedalId\n        Count\n      }\n    }\n  }\n`;\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './Detailspage.scss';\nimport { Query } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Header/Header';\nimport { ACCUMULATIVE_ARENA_QUERY, ACCUMULATIVE_WARZONE_QUERY } from '../../Queries/GraphQLQueries';\n\nclass Detailspage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      arenaMedals: [],\n      warzoneMedals: [],\n    };\n    this.parsedMedalsMetadata = JSON.parse(localStorage.getItem('medalsMetadata'));\n\n  }\n\n  findBestMedals = (medalsArray) => {\n    let medalWithDifficulty = medalsArray.map((medal) => {\n      let foundMedal = this.parsedMedalsMetadata.find((found) => found.id === medal.MedalId) || {};\n      const { id, name, description, difficulty, spriteLocation } = foundMedal\n      if (difficulty === 0) return;\n      return {\n        Id: id,\n        Name: name,\n        Description: description,\n        Difficulty: difficulty,\n        Location: spriteLocation,\n        Count: medal.Count,\n      };\n    });\n    return medalWithDifficulty.sort((a, b) => a.Difficulty - b.Difficulty).slice(0, 10);\n  };\n\n  contentCreator = (queriedData) => {\n    return this.findBestMedals(queriedData).map(({ Location: { spriteSheetUri, left, top }, Count, Name, Description }) => {\n      const medalStyles = {\n        backgroundImage: `url(${spriteSheetUri})`,\n        backgroundPosition: `-${left}px -${top}px`,\n        backgroundSize: 'auto',\n        width: '74px',\n        height: '74px',\n        margin: '8px',\n        size: '50%',\n      };\n      return (\n        <div className='single-medal-container'>\n          <div id='div-medal' className='div-medal' style={medalStyles}>\n            <p className='medal-count'>x{Count}</p>\n          </div>\n          <p id='medal-info' className='medal-info'>\n            {Name} - {Description}\n          </p>\n        </div>\n      );\n    })\n  }\n\n  render() {\n    const player_name = this.props.currentPlayer;\n    const parsedCsrMetadata = JSON.parse(localStorage.getItem('csrMetadata'));\n    const parsedWeaponsMetadata = JSON.parse(localStorage.getItem('weaponsMetadata'));\n\n    return (<>\n      <Header header={'Details Page'} button1={'warzone'} button2={'arena'} />\n      <div className='details-page-container'>\n        <main className='details-page-body'>\n          <Query query={ACCUMULATIVE_ARENA_QUERY} variables={{ player_name }}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>Loading...</p>;\n              if (error) console.log(error);\n\n              const {\n                HighestCsrAttained,\n                TotalGamesWon,\n                TotalGamesLost,\n                TotalGamesTied,\n                TotalGamesCompleted,\n                TotalKills,\n                TotalDeaths,\n                TotalAssists,\n                WeaponWithMostKills,\n                TotalShotsFired,\n                TotalShotsLanded,\n                TotalAssassinations,\n                TotalMeleeKills,\n                TotalGroundPoundKills,\n                TotalShoulderBashKills,\n                MedalAwards,\n              } = data.accumulativeArenaStats;\n\n              const foundWeapon = parsedWeaponsMetadata.find((weapon) => weapon.id === WeaponWithMostKills.WeaponId.StockId);\n              const foundRank = parsedCsrMetadata.find((rank) => rank.id == HighestCsrAttained.DesignationId);\n              const foundTier = foundRank.tiers.find((tier) => tier.id == HighestCsrAttained.Tier).iconImageUrl;\n\n              return (\n                <>\n                  <section className='details-page-section arena-section'>\n                    <h1 className='details-page-heading'>ARENA STATISTICS</h1>\n                    <div className='grouped-details-info csr-container'>\n                      <h4>{`${foundRank.name} ${HighestCsrAttained.Tier}`}</h4>\n                      <img className='details-page-csr' src={foundTier} alt='Players rank tier' />\n                    </div>\n                    <div id='top-separator' className='grouped-details-info'>\n                      <div className='details-text-aligner'>\n                        <p>Arena Win Rate: </p><span className='green-text'>{(TotalGamesWon / TotalGamesCompleted * 100).toFixed(2)}%</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Wins: </p><span className='green-text'>{TotalGamesWon.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Losses: </p><span className='red-text'>{TotalGamesLost.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Games Tied: </p><span className='neutral-text'>{TotalGamesTied}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Games Completed: </p><span className='neutral-text'>{TotalGamesCompleted.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Arena KDA: </p><span className='green-text'>{((TotalKills + TotalAssists / 3) / TotalDeaths).toFixed(3)}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Kills: </p><span className='green-text'>{TotalKills.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Deaths: </p><span className='red-text'>{TotalDeaths.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Total Assists: </p><span className='neutral-text'>{Number(TotalAssists).toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Shooting Accuracy: </p><span className='green-text'>{(TotalShotsLanded / TotalShotsFired).toFixed(4) * 100}%</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Assassinations: </p><span className='neutral-text'>{TotalAssassinations.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Melee Kills: </p><span className='neutral-text'>{TotalMeleeKills.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Ground Pound Kills: </p><span className='neutral-text'>{TotalGroundPoundKills.toLocaleString()}</span>\n                      </div>\n                      <div className='details-text-aligner'>\n                        <p>Shoulder Bash Kills: </p><span className='neutral-text'>{TotalShoulderBashKills.toLocaleString()}</span>\n                      </div>\n                    </div>\n                    <div id='top-separator' className='grouped-details-info'>\n                      <h2 className='details-weapon-heading'>Your Most Deadly Arena Weapon</h2>\n                      <img className='warzone-weapon-image details-best-wep-img' src={foundWeapon.largeIconImageUrl} alt='Weapon' />\n                      <div className='best-wep-info'>\n                        <p id='details-weapon-name'>{foundWeapon.name}</p>\n                        <p className='warzone-box-details'>Kills - {WeaponWithMostKills.TotalKills.toLocaleString()}</p>\n                        <p className='warzone-box-details'>Damage Dealt - {parseInt(WeaponWithMostKills.TotalDamageDealt).toLocaleString()}</p>\n                        <p className='warzone-box-details'>Shots Fired - {WeaponWithMostKills.TotalShotsFired.toLocaleString()}</p>\n                      </div>\n                    </div>\n                  </section>\n                  <Query query={ACCUMULATIVE_WARZONE_QUERY} variables={{ player_name }}>\n                    {({ loading, error, data }) => {\n                      if (loading) return <p>Loading...</p>;\n                      if (error) console.log(error);\n                      const {\n                        TotalKills,\n                        TotalDeaths,\n                        TotalAssists,\n                        TotalShotsFired,\n                        TotalShotsLanded,\n                        TotalGamesWon,\n                        TotalGamesLost,\n                        TotalGamesCompleted,\n                        WeaponWithMostKills,\n                      } = data.warzoneStats;\n                      const foundWeapon = parsedWeaponsMetadata.find((weapon) => weapon.id === WeaponWithMostKills.WeaponId.StockId);\n                      const emblemStyle = { backgroundImage: `url(${this.props.currentImgUrlEmblem})` }\n\n                      return (\n                        <>\n                          <section className='details-page-section warzone-section'>\n                            <h1 className='details-page-heading'>WARZONE STATISTICS</h1>\n                            <div className='grouped-details-info warzone-images-container'>\n                              <img id='details-spartan-pic' src={this.props.currentImgUrlSpartan} />\n                              <h2 className='details-spartan-name'>{this.props.currentPlayer}</h2>\n                              <div className='details-spartan-container' style={emblemStyle}>\n                              </div>\n                            </div>\n                            <div id='top-separator' className='grouped-details-info'>\n                              <div className='details-text-aligner'>\n                                <p>Warzone Win Rate: </p><span className='green-text'>{(TotalGamesWon / TotalGamesCompleted * 100).toFixed(2)}%</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Wins: </p><span className='green-text'>{TotalGamesWon.toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Losses: </p><span className='red-text'>{TotalGamesLost.toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Games Completed: </p><span className='neutral-text'>{(TotalGamesWon + TotalGamesLost + TotalGamesTied).toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Warzone KDA: </p><span className='green-text'>{((TotalKills + TotalAssists / 3) / TotalDeaths).toFixed(3)}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Kills: </p><span className='green-text'>{TotalKills.toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Deaths: </p><span className='red-text'>{TotalDeaths.toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Total Assists: </p><span className='neutral-text'>{TotalAssists.toLocaleString()}</span>\n                              </div>\n                              <div className='details-text-aligner'>\n                                <p>Shooting Accuracy: </p><span className='green-text'>{((TotalShotsLanded / TotalShotsFired) * 100).toFixed(2)}%</span>\n                              </div>\n                            </div>\n                            <div id='top-separator' className='grouped-details-info'>\n                              <h2 className='details-weapon-heading'>Your Most Deadly Warzone Weapon</h2>\n                              <img className='warzone-weapon-image details-best-wep-img' src={foundWeapon.largeIconImageUrl} alt='Weapon' />\n                              <div className='best-wep-info'>\n                                <p id='details-weapon-name'>{foundWeapon.name}</p>\n                                <p className='warzone-box-details'>Kills - {WeaponWithMostKills.TotalKills.toLocaleString()}</p>\n                                <p className='warzone-box-details'>Damage Dealt - {parseInt(WeaponWithMostKills.TotalDamageDealt).toLocaleString()}</p>\n                                <p className='warzone-box-details'>Shots Fired - {WeaponWithMostKills.TotalShotsFired.toLocaleString()}</p>\n                              </div>\n                            </div>\n                          </section>\n                          <section className='details-page-section details-medals-section'>\n                            <h1 className='details-page-heading'>MEDALS</h1>\n                            <p className='details-hover-instructions'>(hover over medal for details)</p>\n                            <div className='medals-detail-section'>\n                              <div className='details-medals-column'>\n                                <h2>ARENA</h2>\n                                <div className='medals-details'>{this.contentCreator(MedalAwards)}</div>\n                              </div>\n                              <div className='details-medals-column'>\n                                <h2>WARZONE</h2>\n                                <div className='medals-details'>{this.contentCreator(data.warzoneStats.MedalAwards)}</div>\n                              </div>\n                            </div>\n                          </section>\n                        </>\n                      );\n                    }}\n                  </Query>\n                </>\n              );\n            }}\n          </Query>\n        </main>\n      </div>\n    </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n  currentImgUrlSpartan: state.currentImgUrlSpartan,\n  currentImgUrlEmblem: state.currentImgUrlEmblem,\n});\n\nexport default connect(mapStateToProps)(Detailspage);\n","import React, { Component } from 'react';\nimport './Arenapage.scss';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Query } from 'react-apollo';\nimport { ARENA_DROPDOWN_QUERY, SELECTED_VARIANT_QUERY, ARENA_CSR_QUERY } from '../../Queries/GraphQLQueries';\n\nclass Arenapage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentGameVariant: '',\n      currentGameVariantName: '',\n    };\n  }\n\n  selectArenaVariant = async (e) => {\n    e.preventDefault();\n    let optionIndex = e.target.selectedIndex;\n    let emptyOption = e.target[0];\n    let selectOptions = e.target.options;\n    let gameVarId = selectOptions[optionIndex].id;\n    let gameVarIdName = selectOptions[optionIndex].text;\n    await this.setState({\n      currentGameVariant: '',\n      currentGameVariantName: e.target.options[emptyOption],\n    });\n    this.setState({\n      currentGameVariant: gameVarId,\n      currentGameVariantName: gameVarIdName,\n    });\n  };\n\n  render() {\n    const player_name = this.props.currentPlayer;\n    const GameBaseVariantId = this.state.currentGameVariant;\n    const parsedWeaponsMetadata = JSON.parse(localStorage.getItem('weaponsMetadata'));\n    const parsedMedalsMetadata = JSON.parse(localStorage.getItem('medalsMetadata'));\n    const parsedCsrMetadata = JSON.parse(localStorage.getItem('csrMetadata'));\n    const parsedSeasonsMetadata = JSON.parse(localStorage.getItem('seasonsMetadata'));\n\n    return (\n      <div className='arena-page'>\n        <header className='arena-header'>\n          <div className='dropdown-container'>\n            <Query\n              query={ARENA_DROPDOWN_QUERY}\n              variables={{ player_name }}\n              key={player_name}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <option>Loading...</option>;\n                if (error) console.log(error);\n                const parsedGameVariantMetadata = JSON.parse(\n                  localStorage.getItem('gameBaseVariantsMetadata')\n                );\n\n                return (\n                  <div className='arena-dropbox-container'>\n                    <label htmlFor='filter'>Choose From Playlist: </label>\n                    <select\n                      onChange={(event) => this.selectArenaVariant(event)}\n                      name='filter'\n                      className='arena-filter-options'\n                    >\n                      <option>No Selection</option>\n                      {data.arenaGameBases.map((id) => {\n                        return (\n                          <option\n                            id={id.GameBaseVariantId}\n                            key={id.GameBaseVariantId}\n                          >\n                            {\n                              parsedGameVariantMetadata.find(\n                                (item) => item.id === id.GameBaseVariantId\n                              ).name\n                            }\n                          </option>\n                        );\n                      })}\n                    </select>\n                  </div>\n                );\n              }}\n            </Query>\n          </div>\n          <div>\n            <h1 className='arena-title'>{this.state.currentGameVariantName || 'Arena Playlist'}</h1>\n            {!this.state.currentGameVariantName && <p className='start-instructions'>(select playlist on the left to get started)</p>}\n          </div>\n          <div className='buttons-container'>\n            <Link to='/homepage' className='homepage-links'>\n              <p className='detail-link arena-button'>HOMEPAGE</p>\n            </Link>\n            <Link to='/details' className='homepage-links'>\n              <p className='detail-link arena-button'>DETAILS PAGE</p>\n            </Link>\n            <Link to='/warzone' className='homepage-links'>\n              <p className='detail-link arena-button'>WARZONE PAGE</p>\n            </Link>\n          </div>\n        </header>\n        {this.state.currentGameVariant && (\n          <Query\n            query={SELECTED_VARIANT_QUERY}\n            variables={{ player_name, GameBaseVariantId }}\n          >\n            {({ loading, error, data }) => {\n              if (loading) return '';\n              if (error) console.log(error);\n              const { TotalGamesWon, TotalGamesLost, TotalGamesTied, TotalGamesCompleted, TotalKills, TotalDeaths, TotalAssists, WeaponWithMostKills, TotalAssassinations, TotalMeleeKills, TotalGroundPoundKills, TotalShoulderBashKills, TotalGrenadeKills, TotalPowerWeaponKills, TotalHeadshots, TotalWeaponDamage, TotalShotsFired, TotalShotsLanded, Impulses, MedalAwards, FlexibleStats } = data.arenaStats\n              const foundWeapon = parsedWeaponsMetadata.find((weapon) => weapon.id === WeaponWithMostKills.WeaponId.StockId);\n\n              const findBestMedals = () => {\n                let medalWithDifficulty = MedalAwards.map(medal => {\n                  let foundMedal = parsedMedalsMetadata.find(found => found.id === medal.MedalId) || {}\n                  const { difficulty, id, name, description, spriteLocation } = foundMedal\n                  if (difficulty === 0) return\n                  return {\n                    Id: id,\n                    Name: name,\n                    Description: description,\n                    Difficulty: difficulty,\n                    Location: spriteLocation,\n                    Count: medal.Count\n                  }\n                })\n                return medalWithDifficulty.sort((a, b) => a.Difficulty - b.Difficulty).slice(0, 6)\n              }\n\n              return (\n                <div className='arena-content-container'>\n                  <main className='arena-main'>\n                    <div className='arena-details-box box-a'>\n                      <div className='wins-container shared-container'>\n                        <h4 className='box-title'>Win Rate {(TotalGamesWon / TotalGamesCompleted * 100).toFixed(2)}%</h4>\n                        <div>\n                          <p className='box-details'>Wins: {TotalGamesWon.toLocaleString()}</p>\n                          <p className='box-details'>Losses: {TotalGamesLost.toLocaleString()}</p>\n                          <p className='box-details'>Ties: {TotalGamesTied.toLocaleString()}</p>\n                        </div>\n                      </div>\n                      <div className='kda-container shared-container'>\n                        <h4 className='box-title'>KDA {((TotalKills + TotalAssists / 3) / TotalDeaths).toFixed(3)}</h4>\n                        <div>\n                          <p className='box-details'>Kills: {TotalKills.toLocaleString()}</p>\n                          <p className='box-details'>Deaths: {TotalDeaths.toLocaleString()}</p>\n                          <p className='box-details'>Assists: {TotalAssists.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className='arena-details-box box-b'>\n                      <h4 className='box-title'>Style Kills</h4>\n                      <div className='kills-details-container'>\n                        <div className='kills-details-column-container'>\n                          <p className='box-details'>Assassinations: {TotalAssassinations.toLocaleString()}</p>\n                          <p className='box-details'>Melee: {TotalMeleeKills.toLocaleString()}</p>\n                          <p className='box-details'>Grenade: {TotalGrenadeKills.toLocaleString()}</p>\n                        </div>\n                        <div>\n                          <p className='box-details'>Power Weapon: {TotalPowerWeaponKills.toLocaleString()}</p>\n                          <p className='box-details'>Ground Pound: {TotalGroundPoundKills.toLocaleString()}</p>\n                          <p className='box-details'>Shoulder Bash: {TotalShoulderBashKills.toLocaleString()}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className='arena-details-box box-c weapon-container'>\n                      <h4 className='box-title'>Best Performing Weapon</h4>\n                      <p className='hover-instructions'>(hover for details)</p>\n                      <img className='weapon-image' src={foundWeapon.largeIconImageUrl} alt='Weapon' />\n                      <div className='best-wep-info'>\n                        <p className='best-wep-title'>{foundWeapon.name}</p>\n                        <p className='box-details'>Kills: {WeaponWithMostKills.TotalKills.toLocaleString()}</p>\n                        <p className='box-details'>Damage Dealt: {parseInt(WeaponWithMostKills.TotalDamageDealt).toLocaleString()}</p>\n                        <p className='box-details'>Shots Fired: {WeaponWithMostKills.TotalShotsFired.toLocaleString()}</p>\n                        <p className='box-details'>Shots Landed: {WeaponWithMostKills.TotalShotsLanded.toLocaleString()}</p>\n                      </div>\n                    </div>\n                    <div className='arena-details-box box-d'>\n                      <h4 className='box-title'>Shooting Stats</h4>\n                      <div>\n                        <p className='box-details'>Total Damage Done: {parseInt(TotalWeaponDamage).toLocaleString()}</p>\n                        <p className='box-details'>Shooting Accuracy: {(TotalShotsLanded / TotalShotsFired * 100).toFixed(2)}%</p>\n                        <p className='box-details'>Shots Fired: {TotalShotsFired.toLocaleString()}</p>\n                        <p className='box-details'>Headshots: {TotalHeadshots.toLocaleString()}</p>\n                      </div>\n                    </div>\n                    <div className='arena-details-box box-f'>\n                      <h4 className='box-title'>Top Medals</h4>\n                      <p className='hover-instructions'>(hover for details)</p>\n                      {findBestMedals().map(({ Location: { spriteSheetUri, left, top }, Count, Name, Description }) => {\n                        const medalStyles = {\n                          backgroundImage: `url(${spriteSheetUri})`,\n                          backgroundPosition: `-${left}px -${top}px`,\n                          backgroundSize: 'auto',\n                          width: '74px',\n                          height: '74px',\n                          margin: '1rem',\n                          size: '50%'\n                        };\n                        return (\n                          <div className='single-medal-container'>\n                            <div style={medalStyles}><p>x{Count}</p></div>\n                            <p className='medal-info'><strong>{Name}</strong> - {Description}</p>\n                          </div>\n                        )\n                      })}\n                    </div>\n                    <div className='arena-details-box box-h weapon-container'>\n                      <h4 className='box-title'>Highest Rank Attained</h4>\n                      <p className='hover-instructions'>(hover for details)</p>\n                      <Query query={ARENA_CSR_QUERY} variables={{ player_name }}>\n                        {({ loading, error, data }) => {\n                          if (loading) return <p>Loading...</p>;\n                          if (error) console.log(error);\n                          const { HighestCsrAttained, HighestCsrPlaylistId, HighestCsrSeasonId } = data.arenaCsr\n                          const foundRank = parsedCsrMetadata.find(rank => rank.id == HighestCsrAttained.DesignationId)\n                          const foundTier = foundRank.tiers.find(tier => tier.id == HighestCsrAttained.Tier).iconImageUrl\n                          const foundPlaylist = parsedSeasonsMetadata.find(playlist => playlist.id === HighestCsrSeasonId)\n                          const foundGameMode = foundPlaylist.playlists.find(playlist => playlist.id === HighestCsrPlaylistId)\n\n                          return (<>\n                            <div className='csr-image-container'>\n                              <img className='csr-images banner-image' src={foundRank.bannerImageUrl} alt='Players rank banner' />\n                              <img className='csr-images tier-image' src={foundTier} alt='Players rank tier' />\n                            </div>\n                            <div className='best-wep-info'>\n                              <p className='best-wep-title highest-rank-title'>{foundRank.name} {HighestCsrAttained.Tier}</p>\n                              <p className='box-details best-season-info'>{foundPlaylist.name}</p>\n                              <p className='box-details best-season-info'>{foundGameMode.name}</p>\n                              <p className='smaller-season-info best-season-info'>({foundGameMode.description})</p>\n                            </div>\n                          </>)\n                        }}\n                      </Query>\n                    </div>\n                    <div className='arena-details-box box-i'>\n                      <img className='arena-spartan' src={this.props.currentImgUrlSpartan} alt='Users spartan' />\n                    </div>\n                  </main>\n                </div>\n              );\n            }}\n          </Query>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n  currentImgUrlSpartan: state.currentImgUrlSpartan,\n  currentImgUrlEmblem: state.currentImgUrlEmblem,\n});\n\nexport default connect(mapStateToProps)(Arenapage);\n","import React, { Component } from 'react';\nimport './Warzonepage.scss';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Query } from 'react-apollo';\nimport { setWarzoneId } from '../../actions';\nimport Header from '../../components/Header/Header';\nimport { GAME_VARIANT_WARZONE_QUERY } from '../../Queries/GraphQLQueries';\n\nclass Warzonepage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gameVariantId: 'dfd51ee3-9060-46c3-b131-08d946c4c7b9',\n    };\n    this.parsedGameBaseVariants = JSON.parse(localStorage.getItem('gameBaseVariantsMetadata'));\n    this.parsedWeaponsMetadata = JSON.parse(localStorage.getItem('weaponsMetadata'));\n    this.parsedMedalsMetadata = JSON.parse(localStorage.getItem('medalsMetadata'));\n  }\n\n  reduceTotals = (data, property) => {\n    return data.reduce((acc, cur) => {\n      acc += cur[property];\n      return acc;\n    }, 0);\n  };\n\n  findMostEffectiveWeapon = (data) => {\n    return data.sort((a, b) => {\n      return b.WeaponWithMostKills.TotalKills - a.WeaponWithMostKills.TotalKills;\n    })[0].WeaponWithMostKills;\n  };\n\n  findMostObtainedMedals = (data) => {\n    let allMedals = data.reduce((acc, cur) => {\n      cur.MedalAwards.forEach((item) => {\n        if (!acc[item.MedalId]) {\n          acc[item.MedalId] = 0;\n        }\n        acc[item.MedalId] += item.Count;\n      });\n      return acc;\n    }, {});\n    let medalIds = Object.keys(allMedals);\n    let sortedMedals = medalIds\n      .sort((a, b) => {\n        return allMedals[b] - allMedals[a];\n      })\n      .slice(0, 6);\n    return sortedMedals.map((item) => {\n      let foundMedal = this.parsedMedalsMetadata.find((medal) => medal.id === item);\n      return {\n        Count: allMedals[item],\n        Name: foundMedal.name,\n        SpriteLocation: foundMedal.spriteLocation,\n      };\n    });\n  };\n\n  createContent = (wholeData, id) => {\n    const { reduceTotals, findMostEffectiveWeapon, findMostObtainedMedals, parsedGameBaseVariants, parsedWeaponsMetadata } = this;\n    const data = wholeData.scenarioStats.filter((item) => item.GameBaseVariantId === id);\n    const foundWeapon = parsedWeaponsMetadata.find((weapon) => weapon.id === findMostEffectiveWeapon(data).WeaponId.StockId);\n\n    return (\n      <div>\n        <div className='wz-variant-medals'>\n          <h3>{parsedGameBaseVariants.find((variant) => variant.id === id).name} Medals:</h3>\n          <div className='wz-displayed-medals'>\n            {findMostObtainedMedals(data).map((medal) => {\n              const medalStyles = {\n                backgroundImage: `url(${medal.SpriteLocation.spriteSheetUri})`,\n                backgroundPosition: `-${medal.SpriteLocation.left}px -${medal.SpriteLocation.top}px`,\n                backgroundSize: 'auto',\n                width: '74px',\n                height: '74px',\n              };\n              return (\n                <div>\n                  x{medal.Count}\n                  <div style={medalStyles}></div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className='wz-info-area'>\n          <div>\n            <div className='wz-box'>\n              <h2>Record</h2>\n              <p>Wins: {reduceTotals(data, 'TotalGamesWon')}</p>\n              <p>Losses: {reduceTotals(data, 'TotalGamesLost')}</p>\n              <p>Ties: {reduceTotals(data, 'TotalGamesTied')}</p>\n            </div>\n            <div className='wz-box'>\n              <h2>Performance</h2>\n              <p>Kills: {reduceTotals(data, 'TotalKills')}</p>\n              <p>Headshots: {reduceTotals(data, 'TotalHeadshots')}</p>\n              <p>Shots Fired: {reduceTotals(data, 'TotalShotsFired')}</p>\n              <p>Shots Landed: {reduceTotals(data, 'TotalShotsLanded')}</p>\n              <p>Total Damage Dealt: {reduceTotals(data, 'TotalWeaponDamage').toFixed(2)}</p>\n            </div>\n          </div>\n          <div className='wz-tool-detail'>\n            <h2>Top Weapon: {foundWeapon.name}</h2>\n            <div className='tool-info'>\n              <p>Kills: {findMostEffectiveWeapon(data).TotalKills}</p>\n              <p>Headshots: {findMostEffectiveWeapon(data).TotalHeadshots}</p>\n              <p>Shots Fired: {findMostEffectiveWeapon(data).TotalShotsFired}</p>\n              <p>Shots Landed: {findMostEffectiveWeapon(data).TotalShotsLanded}</p>\n              <p>Total Damage Dealt: {findMostEffectiveWeapon(data).TotalDamageDealt.toFixed(2)}</p>\n            </div>\n            <img src={foundWeapon.largeIconImageUrl} alt='players best weapon' />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { createContent, props: { currentPlayer, setWarzoneId, } } = this;\n    let player_name = currentPlayer;\n    const firefightVariantId = 'dfd51ee3-9060-46c3-b131-08d946c4c7b9';\n    const assaultVariantId = '42f97cca-2cb4-497a-a0fd-ceef1ba46bcc';\n    const regularVariantId = 'f6de5351-3797-41e9-8053-7fb111a3a1a0';\n\n    return (\n      <div className='warzone-page'>\n        <Header header={'Warzone Page'} button1={'details'} button2={'arena'} />\n        <Query query={GAME_VARIANT_WARZONE_QUERY} variables={{ player_name }}>\n          {({ loading, error, data }) => {\n            if (loading) return '';\n            if (error) console.log(error);\n            console.log(data);\n            return (\n              <div className='accordion-section'>\n                <figure>\n                  <label>Fire Fight</label>\n                  <img className='game-variant-image' src='https://i.imgur.com/x0qQq4E.jpg' alt='Warzone Firefight Background' />\n                  <input type='radio' name='radio-set' defaultChecked='checked' />\n                  <figcaption>\n                    <Link to='/warzone/variant'>\n                      <span onClick={(e) => setWarzoneId(e.target.id)} id={firefightVariantId}>\n                        (Firefight Maps)\n                      </span>\n                    </Link>\n                    {createContent(data, firefightVariantId)}\n                  </figcaption>\n                  <figure>\n                    <label>Assault</label>\n                    <img className='game-variant-image' src='https://i.imgur.com/rV8gvLj.jpg' alt='Warzone Assault Background' />\n                    <input type='radio' name='radio-set' defaultChecked='checked' placeholder='Warzone Assault' />\n                    <figcaption>\n                      <Link to='/warzone/variant'>\n                        <span onClick={(e) => setWarzoneId(e.target.id)} id={assaultVariantId}>\n                          (Assault Maps)\n                        </span>\n                      </Link>\n                      {createContent(data, assaultVariantId)}\n                    </figcaption>\n                    <figure>\n                      <label>Regular</label>\n                      <img className='game-variant-image' src='https://i.imgur.com/QdthRRG.jpg' alt='Warzone Regular Background' />\n                      <input type='radio' name='radio-set' defaultChecked='checked' />\n                      <figcaption>\n                        <Link to='/warzone/variant'>\n                          <span onClick={(e) => setWarzoneId(e.target.id)} id={regularVariantId}>\n                            (Regular Maps)\n                          </span>\n                        </Link>\n                        {createContent(data, regularVariantId)}\n                      </figcaption>\n                      <figure className='opening-selection'>\n                        <div id='arrow-background'>\n                        </div>\n                        <img id='arrow-indicator' src='https://i.imgur.com/MwPGEJ6.gif' alt='Warzone Regular Background' />\n                        <img className='game-variant-image' src='https://i.imgur.com/COPRcuJ.jpg' alt='Warzone Opening Background' />\n                        <input type='radio' name='radio-set' id='accordion-selector-last' defaultChecked='checked' />\n                        <figcaption>\n                        </figcaption>\n                      </figure>\n                    </figure>\n                  </figure>\n                </figure>\n              </div>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n  currentImgUrlSpartan: state.currentImgUrlSpartan,\n  currentImgUrlEmblem: state.currentImgUrlEmblem,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setWarzoneId: (id) => dispatch(setWarzoneId(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Warzonepage);\n","import gql from \"graphql-tag\";\n\nexport const metadataQueryList = [\n  {\n    name: \"mapsMetadata\",\n    query: gql`\n      query MapQuery {\n        mapsMetadata {\n          name\n          description\n          supportedGameModes\n          imageUrl\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"campaignsMetadata\",\n    query: gql`\n      query CampaignsQuery {\n        campaignsMetadata {\n          missionNumber\n          name\n          description\n          imageUrl\n          type\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"skullsMetadata\",\n    query: gql`\n      query SkullsQuery {\n        skullsMetadata {\n          name\n          description\n          imageUrl\n          missionId\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"vehiclesMetadata\",\n    query: gql`\n      query VehiclesQuery {\n        vehiclesMetadata {\n          name\n          description\n          largeIconImageUrl\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"medalsMetadata\",\n    query: gql`\n      query MedalsQuery {\n        medalsMetadata {\n          name\n          description\n          classification\n          difficulty\n          id\n          contentId\n          spriteLocation {\n            spriteSheetUri\n            left\n            top\n          }\n        }\n      }\n    `,\n  },\n  {\n    name: \"gameBaseVariantsMetadata\",\n    query: gql`\n      query GameVariantsQuery {\n        gameBaseVariantsMetadata {\n          name\n          iconUrl\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"weaponsMetadata\",\n    query: gql`\n      query WeaponsQuery {\n        weaponsMetadata {\n          name\n          largeIconImageUrl\n          id\n          type\n        }\n      }\n    `,\n  },\n  {\n    name: \"flexibleStatsMetadata\",\n    query: gql`\n      query FlexibleStatsQuery {\n        flexibleStatsMetadata {\n          name\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"impulsesMetadata\",\n    query: gql`\n      query ImpulsesQuery {\n        impulsesMetadata {\n          internalName\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"seasonsMetadata\",\n    query: gql`\n      query SeasonsQuery {\n        seasonsMetadata {\n          playlists {\n            name\n            description\n            id\n          }\n          name\n          id\n        }\n      }\n    `,\n  },\n  {\n    name: \"enemiesMetadata\",\n    query: gql`\n      query EnemiesQuery {\n        enemiesMetadata {\n          faction\n          name\n          description\n          largeIconImageUrl\n          id\n        }\n      }\n    `,\n  },\n];\n","import React from 'react';\nimport { Query } from 'react-apollo';\nimport Spinner from './Spinner/Spinner';\nimport { metadataQueryList } from './Queries/MetadataQueries';\n\nexport default function MetadataLoader() {\n  return (\n    <div>\n      {metadataQueryList.map((metadata) => {\n        return localStorage[metadata.name] ? (\n          console.log(`metadata for ${metadata.name} already exists`)\n        ) : (\n            <Query\n              query={metadata.query}\n              key={metadataQueryList.indexOf(metadata)}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <Spinner name={metadata.name} />;\n                if (error) console.log(error);\n                localStorage.setItem(`${metadata.name}`, JSON.stringify(data[metadata.name]));\n                return '';\n              }}\n            </Query>\n          );\n      })}\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './WarzoneDropbox.scss';\nimport { connect } from 'react-redux';\nimport { Query } from 'react-apollo';\nimport Header from '../../components/Header/Header';\nimport { WARZONE_DROPDOWN_QUERY, MAP_QUERY } from '../../Queries/GraphQLQueries';\n\nclass WarzoneDropbox extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentMapVariantId: '',\n      currentMapVariantName: '',\n    };\n  }\n\n  selectMapVariant = async (e) => {\n    e.preventDefault();\n    let optionIndex = e.target.selectedIndex;\n    let emptyOption = e.target[0];\n    let selectOptions = e.target.options;\n    let mapVarId = selectOptions[optionIndex].id;\n    let mapVarIdName = selectOptions[optionIndex].text;\n    await this.setState({\n      currentMapVariantId: '',\n      currentMapVariantName: e.target.options[emptyOption],\n    });\n    this.setState({\n      currentMapVariantId: mapVarId,\n      currentMapVariantName: mapVarIdName,\n    });\n  };\n\n  render() {\n    const { props: { currentPlayer, warzoneGameVariantId }, state: { currentMapVariantId, currentMapVariantName }, selectMapVariant } = this\n    const player_name = currentPlayer;\n    const GameBaseVariantId = warzoneGameVariantId;\n    const MapId = currentMapVariantId;\n\n    return (\n      <div className='whole-page'>\n        <div>\n          <Header title={currentMapVariantName} header={'Warzone Variant'} button1={'warzone'} button2={'arena'} />\n          <Query query={WARZONE_DROPDOWN_QUERY} variables={{ player_name, GameBaseVariantId }}>\n            {({ loading, error, data }) => {\n              if (loading) return <option>Loading...</option>;\n              if (error) console.log(error);\n              const parsedMapsMetadata = JSON.parse(localStorage.getItem('mapsMetadata'));\n\n              return (\n                <div className='wz-drop-down'>\n                  <label id='playlist' htmlFor='filter'> Personal Warzone Playlist:</label>\n                  <select onChange={(event) => selectMapVariant(event)} name='filter' className='warzone-dropdown'>\n                    <option>No Selection</option>\n                    {data.wzVariantStats\n                      .filter((gameVariant) => gameVariant.GameBaseVariantId === warzoneGameVariantId)\n                      .map((id) => {\n                        return (\n                          <option id={id.MapId} key={id.MapId}>\n                            {parsedMapsMetadata.find((item) => item.id === id.MapId).name}\n                          </option>\n                        );\n                      })}\n                  </select>\n                </div>\n              );\n            }}\n          </Query>\n        </div>\n        <Query query={MAP_QUERY} variables={{ player_name, GameBaseVariantId, MapId }}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) console.log(error);\n            const parsedMapsMetadata = JSON.parse(localStorage.getItem('mapsMetadata'));\n            const parsedWeaponsMetadata = JSON.parse(localStorage.getItem('weaponsMetadata'));\n            const foundMap = parsedMapsMetadata.find((map) => map.id === MapId);\n            const foundWeapon = parsedWeaponsMetadata.find((weapon) => {\n              if (data.mapStats) {\n                return weapon.id === data.mapStats.WeaponWithMostKills.WeaponId.StockId;\n              }\n            });\n\n            return !data.mapStats ? (\n              <p>Select From Dropdown...</p>\n            ) : (\n                <div className='main-container'>\n                  <div className='dropbox-container'>\n                    <div className='imageHolder'>\n                      <h3 id='imageHolderName'>{currentMapVariantName}</h3>\n                      {MapId && <img src={foundMap.imageUrl} className='images' alt='selected halo 5 map' />}\n                    </div>\n                    <div className='dropbox-data-content'>\n                      <p className='heading-details'>Record/Stats</p>\n                      <p>Total Games Won: {data.mapStats.TotalGamesWon}</p>\n                      <p>Total Games Lost: {data.mapStats.TotalGamesLost}</p>\n                      <p>Total Games Tied: {data.mapStats.TotalGamesTied}</p>\n                      <p>Total Kills: {data.mapStats.TotalKills}</p>\n                      <p>Total Headshots: {data.mapStats.TotalHeadshots}</p>\n                      <p>Total Weapon Damage: {data.mapStats.TotalWeaponDamage.toFixed(2)}</p>\n                      <p>Total Shots Fired: {data.mapStats.TotalShotsFired}</p>\n                      <p>Total Shots Landed: {data.mapStats.TotalShotsLanded}</p>\n                    </div>\n                  </div>\n                  <div className='second-row'>\n                    <div className='weapon-info'>\n                      <p className='heading-details'>Most Used Tool</p>\n                      <p>\n                        {foundWeapon.name} Kills: {data.mapStats.WeaponWithMostKills.TotalKills}\n                      </p>\n                      <p>\n                        {foundWeapon.name} Headshots: {data.mapStats.WeaponWithMostKills.TotalHeadshots}\n                      </p>\n                      <p>\n                        {foundWeapon.name} Damage Dealt: {data.mapStats.WeaponWithMostKills.TotalDamageDealt.toFixed(2)}\n                      </p>\n                      <p>\n                        {foundWeapon.name} Shots Fired: {data.mapStats.WeaponWithMostKills.TotalShotsFired}\n                      </p>\n                      <p>\n                        {foundWeapon.name} Shots Landed: {data.mapStats.WeaponWithMostKills.TotalShotsLanded}\n                      </p>\n                    </div>\n                    <div className='weapon-container-b'>\n                      <h3>{foundWeapon.name}</h3>\n                      <img src={foundWeapon.largeIconImageUrl} alt='players best weapon' />\n                    </div>\n                  </div>\n                </div>\n              );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n});\n\nexport default connect(mapStateToProps)(WarzoneDropbox);\n","import React, { Component } from \"react\";\nimport \"./WarzoneVariant.scss\";\nimport { connect } from \"react-redux\";\nimport WarzoneDropbox from \"../WarzoneDropbox/WarzoneDropbox\";\n\nclass WarzoneFireFight extends Component {\n  render() {\n    const warzoneGameVariantId = this.props.currentWzVariantId;\n    \n    return (\n      <>\n        <WarzoneDropbox warzoneGameVariantId={warzoneGameVariantId} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentPlayer: state.currentPlayer,\n  currentWzVariantId: state.currentWzVariantId,\n});\n\nexport default connect(mapStateToProps)(WarzoneFireFight);\n","import React from 'react';\nimport './LibrarySelector.scss';\n\nconst LibrarySelector = ({ changeLibrary }) => {\n  return (\n    <div className='library-buttons-container'>\n      <p className='libraries-button' data-compare='type' data-filter={JSON.stringify(['OsirisTeam', 'BlueTeam'])} onClick={(event) => changeLibrary(event)}>\n        Campaigns\n      </p>\n      <p className='libraries-button' data-compare='' data-filter={JSON.stringify([])} onClick={(event) => changeLibrary(event)}>\n        Vehicles\n      </p>\n      <p className='libraries-button' data-compare='' data-filter={JSON.stringify([])} onClick={(event) => changeLibrary(event)}>\n        Skulls\n      </p>\n      <p className='libraries-button' data-compare='type' data-filter={JSON.stringify(['Standard', 'Power', 'Unknown'])} onClick={(event) => changeLibrary(event)}>\n        Weapons\n      </p>\n      <p className='libraries-button' data-compare='classification' data-filter={JSON.stringify(['Vehicles', 'KillingSpree', 'Style', 'WeaponProficiency', 'MultiKill', 'Warzone'])} onClick={(event) => changeLibrary(event)}>\n        Medals\n      </p>\n      <p className='libraries-button' data-compare='faction' data-filter={JSON.stringify(['Covenant', 'Promethean', 'Unsc'])} onClick={(event) => changeLibrary(event)}>\n        Enemies\n      </p>\n      <p className='libraries-button' data-compare='supportedGameModes' data-filter={JSON.stringify(['Campaign', 'Warzone', 'Arena'])} onClick={(event) => changeLibrary(event)}>\n        Maps\n      </p>\n    </div>\n  );\n};\n\nexport default LibrarySelector;\n","import React from 'react';\nimport './LibraryCardsContainer.scss';\n\nconst LibraryCardsContainer = ({ selectedLibrary, selectedLibraryName }) => {\n  const libraryCards = selectedLibrary.map((card) => {\n    if (selectedLibraryName === 'medals' && card.spriteLocation) {\n      const { spriteLocation: { spriteSheetUri, left, top }, name, description } = card\n      const medalStyle = {\n        backgroundImage: `url(${spriteSheetUri})`,\n        backgroundPosition: `-${left}px -${top}px`,\n        backgroundSize: 'auto',\n        width: '74px',\n        height: '74px',\n      };\n      return (\n        <div className='library-medal-container'>\n          <li id='library-medal' style={medalStyle}></li>\n          <p className='meta-medal-title'>{name}</p>\n          <p className='meta-medal-description'>{description}</p>\n        </div>\n      );\n    }\n    const { name, description, largeIconImageUrl, imageUrl, faction, type } = card\n    if (selectedLibraryName === 'skulls') {\n      return (\n        <li id='library-skull'>\n          <a>\n            <span>{name} <p className='library-card-description'>{description}</p></span>\n            <img src={largeIconImageUrl || imageUrl} />\n          </a>\n        </li>\n      );\n    }\n    if (selectedLibraryName === 'weapons' && type === 'Vehicle') {\n      return \n    }\n      return (\n        <li>\n          <a>\n            <span>\n              {name}\n              <p className='library-card-description'>{description}</p>\n              <p className='library-card-description'>{faction}</p>\n              <p className='library-card-description'>{type}</p>\n            </span>\n\n            <img src={largeIconImageUrl || imageUrl} />\n          </a>\n        </li>\n      );\n  });\n\n  return (\n    <div className='library-cards-container'>\n      <ul>{libraryCards}</ul>\n    </div>\n  );\n};\n\nexport default LibraryCardsContainer;\n","import React from 'react';\nimport './LibraryCardsFilters.scss'\n\nexport const LibraryCardsFilters = ({ selectedLibraryFilters, filterChosenLibrary }) => {\n  let filters = selectedLibraryFilters.map(filter => <div className='filter-border'><p onClick={(event) => filterChosenLibrary(event)} >{filter}</p></div>)\n  return (\n    <div className='filter-buttons'>\n      <p onClick={(event) => filterChosenLibrary(event)}>ALL</p>\n      {filters}\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport './MetadataPage.scss';\nimport Header from '../Header/Header';\nimport LibrarySelector from '../LibrarySelector/LibrarySelector';\nimport LibraryCardsContainer from '../LibraryCardsContainer/LibraryCardsContainer';\nimport { LibraryCardsFilters } from '../LibraryCardsFilters/LibraryCardsFilters';\n\nclass MetadataPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLibraryName: '',\n      selectedLibrary: [],\n      selectedLibraryFilters: [],\n      selectedCompare: '',\n    };\n  }\n\n  changeLibrary = (e) => {\n    this.setState({ selectedLibraryName: e.target.innerText.toLowerCase() }, () => {\n      this.changeSelectedLibrary();\n    });\n    this.changeLibraryFilters(e);\n    this.setState({ selectedCompare: e.target.dataset.compare })\n  };\n\n  changeSelectedLibrary = () => {\n    let library = JSON.parse(localStorage.getItem(`${this.state.selectedLibraryName}Metadata`));\n    this.setState({ selectedLibrary: library });\n  };\n\n  changeLibraryFilters = (e) => {\n    this.setState({ selectedLibraryFilters: JSON.parse(e.target.dataset.filter) });\n  };\n\n  filterChosenLibrary = async (e) => {\n    const btnText = e.target.innerText\n    const filterProp = this.state.selectedCompare\n    await this.changeSelectedLibrary()\n    if (btnText === 'ALL') return\n    if (this.state.selectedLibraryName === 'maps') {\n      const lowerCasedBtnText = btnText.toLowerCase();\n      const correctBtnText = lowerCasedBtnText.charAt(0).toUpperCase() + lowerCasedBtnText.slice(1)\n\n      var newLibrary = this.state.selectedLibrary.filter(library => {\n        if (!library[filterProp]) return\n        else return library[filterProp].includes(correctBtnText)\n      })\n    } else {\n      var newLibrary = this.state.selectedLibrary.filter(library => {\n        return library[filterProp].toUpperCase() == btnText\n      })\n    }\n\n\n    this.setState({ selectedLibrary: newLibrary })\n  };\n\n  render() {\n    const { state: { selectedLibrary, selectedLibraryFilters, selectedLibraryName }, changeLibrary, filterChosenLibrary } = this;\n\n    return (\n      <div className='metadata-body'>\n        <Header title={'Libraries'} button1={'warzone'} button2={'arena'} />\n        <LibrarySelector changeLibrary={changeLibrary} />\n        <LibraryCardsFilters selectedLibraryFilters={selectedLibraryFilters} filterChosenLibrary={filterChosenLibrary} />\n        <LibraryCardsContainer selectedLibraryName={selectedLibraryName} selectedLibrary={selectedLibrary} />\n      </div>\n    );\n  }\n}\n\nexport default MetadataPage;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport WelcomePage from '../WelcomePage/WelcomePage';\nimport Homepage from '../HomePage/Homepage';\nimport Detailspage from '../Detailspage/Detailspage';\nimport Arenapage from '../Arenapage/Arenapage';\nimport Warzonepage from '../Warzonepage/Warzonepage';\nimport MetadataLoader from '../../MetadataLoader';\nimport WarzoneVariant from '../WarzoneVariant/WarzoneVariant';\nimport MetadataPage from '../../components/MetadataPage/MetadataPage';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <>\n        <div>\n          <MetadataLoader />\n          <Switch>\n            <Route exact path='/' component={WelcomePage} />\n            <Route exact path='/homepage' component={Homepage} />\n            <Route exact path='/details' component={Detailspage} />\n            <Route exact path='/arena' component={Arenapage} />\n            <Route exact path='/warzone' component={Warzonepage} />\n            <Route exact path='/warzone/variant' component={WarzoneVariant} />\n            <Route exact path='/libraries' component={MetadataPage} />\n          </Switch>\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const currentPlayerReducer = (state = spartanName, action) => {\n  switch (action.type) {\n    case \"SET_CURRENT_PLAYER\":\n      localStorage.setItem(\"spartanName\", action.player);\n      return action.player;\n    default:\n      return state;\n  }\n};\n\nexport const currentUrlSpartanReducer = (state = spartanAppearance, action) => {\n  switch (action.type) {\n    case \"SET_URL_SPARTAN\":\n      localStorage.setItem(\"spartanAppearance\", action.url);\n      return action.url;\n    default:\n      return state;\n  }\n};\n\nexport const currentUrlEmblemReducer = (state = spartanEmblem, action) => {\n  switch (action.type) {\n    case \"SET_URL_EMBLEM\":\n      localStorage.setItem(\"spartanEmblem\", action.url);\n      return action.url;\n    default:\n      return state;\n  }\n};\n\nexport const currentWarzoneIdReducer = (state = warzoneVariantId, action) => {\n  switch (action.type) {\n    case \"SET_WZ_ID\":\n      localStorage.setItem(\"warzoneVariantId\", action.id);\n      return action.id;\n    default:\n      return state;\n  }\n};\n\nconst spartanName = localStorage.getItem(\"spartanName\");\nconst spartanEmblem = localStorage.getItem(\"spartanEmblem\");\nconst spartanAppearance = localStorage.getItem(\"spartanAppearance\");\nconst warzoneVariantId = localStorage.getItem(\"warzoneVariantId\")\n","import { combineReducers } from 'redux';\nimport * as reducers from './allReducers';\n\nconst rootReducer = combineReducers({\n  currentPlayer: reducers.currentPlayerReducer,\n  currentImgUrlSpartan: reducers.currentUrlSpartanReducer,\n  currentImgUrlEmblem: reducers.currentUrlEmblemReducer,\n  currentWzVariantId: reducers.currentWarzoneIdReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReduceer from \"./reducers\";\n\nconst store = createStore(\n  rootReduceer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nconst router = (\n  <Router>\n    <Provider store={store}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </Provider>\n  </Router>\n);\nReactDOM.render(router, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const api_key = \"696024830e0045f9a1789ed154d07264\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nmodule.exports = { api_key, proxyurl };\n"],"sourceRoot":""}